name: Web Reusable Deploy Workflow

on:
  workflow_call:
    inputs:
      deploy_path:
        required: true
        type: string
        description: "The path to deploy to (e.g., public_html or beta)"
    secrets:
      SSH_HOST:
        required: true
      SSH_USERNAME:
        required: true
      SSH_PASSWORD:
        required: true
      SANITY_DATASET:
        required: true
      SANITY_PROJECT_ID:
        required: true
      FTP_SERVER:
        required: true
      FTP_USERNAME:
        required: true
      FTP_PASSWORD:
        required: true

jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: ‚¨áÔ∏è Install dependencies
        run: pnpm install

      - name: üõ†Ô∏è Build Next.js application
        env:
          SANITY_DATASET: ${{ secrets.SANITY_DATASET }}
          SANITY_PROJECT_ID: ${{ secrets.SANITY_PROJECT_ID }}
        run: |
          cd apps/web && pnpm run build

      - name: üì¶ Prepare deployment
        run: |
          cd apps/web/out
          tar -czf ../../../deploy.tar.gz .

      - name: üîê Install sshpass
        run: sudo apt-get install -y sshpass

      - name: üßπ Clean remote directory (SSH)
        id: ssh-clean
        continue-on-error: true
        env:
          TERM: xterm
        run: |
          export SSHPASS=${{ secrets.SSH_PASSWORD }}
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} '
          mkdir -p ${{ inputs.deploy_path }} &&
          cd ${{ inputs.deploy_path }} &&
          find . -mindepth 1 -maxdepth 1 ! -name "docs" ! -name "images" -exec rm -rf {} +'

      - name: üìÇ Transfer and extract files (SSH)
        id: ssh-transfer
        continue-on-error: true
        env:
          TERM: xterm
        run: |
          export SSHPASS=${{ secrets.SSH_PASSWORD }}
          sshpass -e scp -o StrictHostKeyChecking=no deploy.tar.gz ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ inputs.deploy_path }}/
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} '
          cd ${{ inputs.deploy_path }} &&
          tar -xzf deploy.tar.gz &&
          rm deploy.tar.gz'

      - name: üìÇ FTP Sync (Fallback)
        if: steps.ssh-clean.outcome == 'failure' || steps.ssh-transfer.outcome == 'failure'
        run: |
          sudo apt-get update && sudo apt-get install -y lftp
          lftp -e "
            set ftp:ssl-allow no;
            open ${{ secrets.FTP_SERVER }};
            user ${{ secrets.FTP_USERNAME }} ${{ secrets.FTP_PASSWORD }};
            mirror -R --verbose --parallel=10 --use-cache --exclude-glob=docs/** --exclude-glob=images/** ./apps/web/out/ ${{ inputs.deploy_path }}/
            bye
          "
